Logging (Логирование) 
Логирование - это процесс записи сообщений, которые могут быть полезны для отслеживания выполнения программы, откладки и анализа ошибок.

Основные Концепции логирования:
Логгеры (loggers) - компоненты, которые вызывают запись сообщений. 
Обработчики (handlers) - компоненты, которые определяют, куда будут отправляться лог-сообщения (файл, консоль и т.д.)
Фильтр (filters) - компоненты, которые позволяют фильтровать лог-сообщения, чтобы определенные сообщения записывались только при выполнении определенных условий. 

Уровни логгирования (logging levels) - определить важность лог-сообщений:
Debug 
Info
Warning
Error
Critical 

Кэширование - это процесс сохранения вычислительных данных для повторного использования, чтоыб уменьшить время отклика и нагрузку на сервер 

Celery - мощний инструмент для выполнения задач в фоновом режиме, легко интергируется с Django. Он помогает разгрузить основной поток выполнения и улучшить производительность нашего приложения (особенно для выполнения операций: отправки писем, подсчет чего-либо и другие)
Основные функции:
1. Асинхронное выполнение задач
2. Повышение производительности 
3. Масштабируемость 
4. Надежность выполнения задач и повторное выполнение задач в случае ошибки 
5. Отслеживание и мониторинг задач 

Docker - это платформа для разработки, позволяет запускать приложения в контейнерах. Контейнеры представлят собой изолированые среды, в которых запускаются приложения и их зависимости 

Docker engine - основной компонент, который отвечает за создание и управление контейнерами, движок который управляет контейнерами 

Основные компоненты: 
Docker Images (Образы) - шаблоны, которые содержат все необходимое для запуска приложения, включая код, библеотеки, зависимости и настройки. Образы неизменяемы и могут быть сохранены в реестре образов (Docker Registry) 
Docker Containers (Контейнеры) - запущенный экземпляр Docker Images которые изолированы от нащей операционной системы и других контейнеров 
Volumes (Том) - это механизм хранения данных в Docker

Dockerfile - текстовый файл содержащий набор инструкций для создания Docker-образа. 

Docker Compose - инструмент для определения и управления несколькими dockerfile (образами)
Позволяет управлять многоконтейнерными Docker-приложениями 

Docker-hub - облачный реестр Docker-образов, позволящий пользователю загружать, сохранять и обмениваться образами 

Основные команды: 
docker images - показывает установленные образы
docker ps - показывает текущие контейнеры которые работают 
docker ps -a - показывает все контейнеры (выключенные и работающие)
docker run 'Name images' - скачивает образ и запускает контейнер


docker stop 'Conteiner_ID' - останaвливает контейнер
docker start 'Conteiner_ID'- запускает контейнер 
docker kill 'Conteiner_ID' - убивает ( завершает работу) контейнера
docker rm 'Conteiner_ID' - удаляет контейнер
docker mri 'name images' - удаляет образ
docker exec -it 'Conteiner_ID' bash - запускает терминал запущенного контейнера


docker build - создание образа из docker-файлов
docker pull - скачивает образ с dockerhub
docker push - отправляет образ в dockerhub

docker compose:

docker-compose up - запуск сервисов 
docker-compose down - остановка сервисов 
docker-compose ps - просмотр всех запущенных сервисов 
docker-compose build - создание сервиса из docker-compose


Dockerfile:
FROM - главный образ с которого идет сборка 
MAINTAINER name <mail> - кто собрал образ
RUN - запускает команды
CMD - запускает процессы
COPY - копирует файлы из нашего хоста (операционной системы) в внутрь контейнера 
напрмер: . (указывается расположение хоста) /app (указывается куда будут скопированы файлы внутри контейнера )
expose - открыть порт 
workdir - устанавливает рабочую директорию, мы попадаем в нее при заходе внутрь контейнера 




FROM python:3
задает базовый образ для нашей сборки 

ENV PYTHONIOENCODING UTF-8 - устанавливает кодировку по умолчанию
ENV TZ=Asia/Bishkek - устанавливает временную зону 
эти команды устанавливают переменные окружения 

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo > /etc/timezone

WORKDIR /user/src/app
устанавливает рабочую директорию 

COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

RUN mkdir static && mkdir media
COPY . .

RUN python3 manage.py collecstatic --noinput

RUN chmod -R 755 /ursr/src/app/static

EXPOSE 8000
открыть порт 





